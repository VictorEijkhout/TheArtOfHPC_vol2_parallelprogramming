# -*- makefile -*-
################################################################
####
#### This makefile is part of `Parallel Programming in MPI and OpenMP'
#### by Victor Eijkhout, copyright 2013-2025
#### eijkhout@tacc.utexas.edu
####
#### include Makefile for course slides MPI/OpenMP/hybrid
####
#### also for lab sessions; maybe to be split?
#### this is invoked from the slides-{mpi,omp,ddt,hybrid} directories
####
################################################################

LATEXENGINE =  xelatex -shell-escape
# pdflatex

info::
	@echo "make course COURSE=... (in: ${COURSES}, default=${COURSE})"
	@echo "make courses : all courses;"
	@if [ ! -z "${LANGUAGES}" ] ; then \
	    echo "make languages (using LANGUAGES=${LANGUAGES}) [ COURSE=... ]" \
	 ; fi
.PHONY: course courses languages course_prep
LANGUAGE = all
LANGUAGES = c f p x
course_prep ::
	@echo && echo "Setting up for language <<${LANGUAGE}>>" && echo
	@cp ${COURSE}_course.tex ${COURSE}_${LANGUAGE}_course.tex 
	@cp ../course-support/lang_${LANGUAGE}.tex ../course-support/lang.tex
	@make --no-print-directory getfiles
courses :: course_prep
	@if [ ! -z "${COURSES}" ] ; then \
	    cp ../course-support/lang_all.tex lang.tex \
	     && for c in ${COURSES} ; do \
	            make --no-print-directory course COURSEPREP=0 COURSE=$$c \
	        ; done \
	    ; \
	 fi
languages :
	@if [ -z "${LANGUAGES}" ] ; then \
	  languages=c ; else languages="${LANGUAGES}" ; fi \
	 && for l in $$( echo $${languages} | tr ',' ' ' ) ; do \
	        make --no-print-directory course_prep LANGUAGE=$${l} COURSE=${COURSE} \
	         && make course COURSE=${COURSE}_$${l} LANGUAGE=$${l} \
	         && rm -f ${COURSE}_$${l}_course.tex \
	    ; done 
COURSEPREP = 1
course ::
	@if [ -z "${COURSE}" ] ; then \
	    echo "Error: no COURSE variable defined" && exit 1 ; fi 
	@if [ -z "${LANGUAGE}" ] ; then \
	    cp ../course-support/lang_all.tex ./lang.tex \
	 ; else \
	    cp ../course-support/lang_${LANGUAGE}.tex ./lang.tex \
	 ; fi
	@if [ "${COURSEPREP}" = "1" ] ; then \
	  make --no-print-directory course_prep ; fi 
	@make --no-print-directory pdf FILE=${COURSE}_course
	@make --no-print-directory diagnostics FILE=${COURSE}_course
	@cp ../course-support/lang_all.tex ./lang.tex
no_acro_rule :
	@acro=`cat ${COURSE}_course.log | grep "Acronym.*not defined" | wc -l` \
	 && if [ $$acro -gt 0 ] ; then \
	      echo "Resolving $$acro undefined acronyms" \
	      && make --no-print-directory pdf FILE=${COURSE}_course \
	    ; fi

.PHONY: beamerfiles onepass pdf onepassformat 
info ::
	@echo "make pdf onepass COURSE=... / FILE=..."
TEXROOTDIR = ../../booksources
pdf :: beamerfiles
	@echo && echo "First pass..." && echo \
	 && export file=$$( make --no-print-directory filename COURSE="${COURSE}" FILE="${FILE}" ) \
	 && make --no-print-directory onepassformat FORMAT="${FORMAT}" FILE=$${file} \
	 && if [ -z "${BIB}" ] ; then \
	        bib=0 ; else bib=1 ; fi \
	 && if [ $${bib} -eq 1 ] ; then \
	        ( bibtex          $${file} || echo true ) \
	    ; fi \
	 && if [ -z "${INDEX}" ] ; then \
	        index=0 ; else index=1 ; fi \
	 && if [ $${index} -eq 1 ] ; then \
	        ( makeindex       $${file} || echo true ) \
	    ; fi \
	 && if [ $$( cat ${FILE}.log | grep "Rerun to get cross-references right" | wc -l ) -eq 0 ] ; then \
	    ref=0; else ref=1 ; fi \
	 && if [ $${index} -eq 1 -o $${bib} -eq 1 -o $${ref} -eq 1 ] ; then \
	        echo && echo "Second  pass..." && echo \
	         && make --no-print-directory onepassformat FORMAT="${FORMAT}" FILE=$${file} \
	    ; fi
beamerfiles :
	@\
	if [ "`whoami`" = "eijkhout" ] ; then \
	    ( cd ../../beamer \
	     && rsync -v ../../parallel-programming-private/beamer/*.sty . \
	    ) \
	; fi

LOCALTEXINPUTS = .:../../beamer:../..//

.PHONY: listextra extrafiles
listextra :
	@echo ${EXTRAFILES}
extrafiles :
	@for f in `make --no-print-directory listextra` ; do \
	    make --no-print-directory onepass COURSE= FILE=$${f%%.pdf} \
	    ; done

info ::
	@echo "make preview"
.PHONY: preview
preview:
	xpdf -g 770x477 ${FILE}.pdf &

##
## cut files renaming
## for the textbook
##
.PHONY: extract
info ::
	@echo "make extract : rename cut files to something more meaningful"
extract :
	@echo "Extracting cut files" \
	&& for e in *.cut ; do \
	  if [ `cat $$e | grep label | wc -l` -eq 1 ] ; then \
	    export nam=`cat $$e | grep label | sed -e s/^.*label.// -e s/\}//` ; \
	    cp $$e ../../snippets/$$nam.tex ; \
	  fi ; \
	done

